;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name ajax.url, :imports nil, :requires {str clojure.string, clojure.string clojure.string, u ajax.util, ajax.util ajax.util}, :uses nil, :defs {key-encode {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :line 59, :column 8, :end-line 59, :end-column 18, :private true, :arglists (quote ([key]))}, :private true, :name ajax.url/key-encode, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :end-column 18, :method-params ([key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key]))}, value-encode {:name ajax.url/value-encode, :file "resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :line 62, :column 1, :end-line 62, :end-column 28, :private true, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :line 62, :column 16, :end-line 62, :end-column 28, :private true}}, key-value-pair-to-str {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :line 66, :column 8, :end-line 66, :end-column 29, :private true, :arglists (quote ([[k v]]))}, :private true, :name ajax.url/key-value-pair-to-str, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :end-column 29, :method-params ([p__7906]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[k v]]))}, vec-key-transform-fn {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :line 69, :column 18, :end-line 69, :end-column 38, :private true, :arglists (quote ([vec-key-encode k v] [vec-key-encode k] [vec-key-encode])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([vec-key-encode k v] [vec-key-encode k] [vec-key-encode]), :arglists ([vec-key-encode k v] [vec-key-encode k] [vec-key-encode]), :arglists-meta (nil nil nil)}}, :private true, :name ajax.url/vec-key-transform-fn, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :end-column 38, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([vec-key-encode k v] [vec-key-encode k] [vec-key-encode]), :arglists ([vec-key-encode k v] [vec-key-encode k] [vec-key-encode]), :arglists-meta (nil nil nil)}, :method-params ([vec-key-encode k v] [vec-key-encode k] [vec-key-encode]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 3, :fn-var true, :arglists ([vec-key-encode k v] [vec-key-encode k] [vec-key-encode])}, to-vec-key-transform {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :line 72, :column 8, :end-line 72, :end-column 28, :private true, :arglists (quote ([vec-strategy]))}, :private true, :name ajax.url/to-vec-key-transform, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :end-column 28, :method-params ([vec-strategy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vec-strategy]))}, param-to-key-value-pairs {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :line 80, :column 18, :end-line 80, :end-column 42, :private true, :arglists (quote ([vec-key-transform prefix [key value]] [vec-key-transform prefix] [vec-key-transform])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([vec-key-transform prefix [key value]] [vec-key-transform prefix] [vec-key-transform]), :arglists ([vec-key-transform prefix [key value]] [vec-key-transform prefix] [vec-key-transform]), :arglists-meta (nil nil nil)}}, :private true, :name ajax.url/param-to-key-value-pairs, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :end-column 42, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([vec-key-transform prefix [key value]] [vec-key-transform prefix] [vec-key-transform]), :arglists ([vec-key-transform prefix [key value]] [vec-key-transform prefix] [vec-key-transform]), :arglists-meta (nil nil nil)}, :method-params ([vec-key-transform prefix [key value]] [vec-key-transform prefix] [vec-key-transform]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 3, :fn-var true, :arglists ([vec-key-transform prefix [key value]] [vec-key-transform prefix] [vec-key-transform])}, params-to-str {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :line 110, :column 17, :end-line 110, :end-column 30, :arglists (quote ([vec-strategy params] [vec-strategy])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([vec-strategy params] [vec-strategy]), :arglists ([vec-strategy params] [vec-strategy]), :arglists-meta (nil nil)}}, :name ajax.url/params-to-str, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([vec-strategy params] [vec-strategy]), :arglists ([vec-strategy params] [vec-strategy]), :arglists-meta (nil nil)}, :method-params ([vec-strategy params] [vec-strategy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists ([vec-strategy params] [vec-strategy])}, url-request-format {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :line 120, :column 7, :end-line 120, :end-column 25, :arglists (quote ([] [{:keys [vec-strategy]}])), :doc "The request format for simple POST and GET.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [vec-strategy]}]), :arglists ([] [{:keys [vec-strategy]}]), :arglists-meta (nil nil)}}, :name ajax.url/url-request-format, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\url.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [vec-strategy]}]), :arglists ([] [{:keys [vec-strategy]}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [vec-strategy]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [vec-strategy]}]), :doc "The request format for simple POST and GET."}}, :require-macros {p poppea, poppea poppea}, :cljs.analyzer/constants {:seen #{:else :write :java :content-type :vec-strategy}, :order [:java :else :vec-strategy :write :content-type]}, :doc "At first blush, it's pretty bizarre that an entire file is devoted to one  \n function, namely params-to-str, which just takes a map and converts it to\n a querystring. However, it turns out that people sometimes want to encode\n fairly complex maps and the behaviour in the presence of vectors/arrays\n is controversial.\n\n The basic question is: what {:a [1 2]} be encoded as? The correct answer\n as far as ring is concerned is a=1&a=2. This is also true of most Java\n implementations, ASP.NET, Angular, Haskell and even old-school ASP. This \n is called vec-strategy :java in the code. Rails and PHP, however, \n prefer a[]=1&a[]=2, which has an obvious implementation in a dynamic \n language. This is called vec-strategy :rails. Finally, there's what \n cljs-ajax (mistakenly) did between versions 0.4.0 and 0.6.x: \n a[0]=1&a[2]=1, which is called vec-strategy :indexed. This is retained \n mostly for people who need to keep compatibility with the previous behaviour.\n\n None of these are the \"correct answer\": the HTTP standards are\n silent on the subject, so you're left with what your server accepts, and\n different servers have different conventions. Worse, if you send the\n wrong convention it gets misinterpreted. Send strategy :rails to a :java\n server and you get { \"a[]\" [1 2]}. Worse, send strategy :java to a :rails\n server and you get { \"a\" 2 }. So it's important to know what your server's\n convention is.\n\n The situation for maps is simpler, pretty much everyone encodes\n {:a {:b 1}} as \"a[b]=1\". That is, assuming they process it at all.\n The HTTP spec is similarly silent on this and your server may get your\n language's equivalent of { \"a[b]\" 1 }. In cases like this, you have two\n choices 1) write your own server-side decoder or 2) don't ever send\n nested maps.\n\n If you ever wanted to consider exactly how bad the effect of supporting\n a wide range of use cases, consider that this was the original code:\n\n (defn params-to-str [params]\n    (if params\n        (-> params      \n            clj->js\n            structs/Map.\n            query-data/createFromMap\n            .toString)))\n\n This code remains completely correct for at least 90% of actual users\n of cljs-ajax. Now we have ~50 SLOCs achieving much the same result.\n"}