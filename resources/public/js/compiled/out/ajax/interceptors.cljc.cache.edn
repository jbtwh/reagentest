;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name ajax.interceptors, :imports nil, :requires {str clojure.string, clojure.string clojure.string, u ajax.util, ajax.util ajax.util, url ajax.url, ajax.url ajax.url, ajax.protocols ajax.protocols}, :uses {-status ajax.protocols, AjaxImpl ajax.protocols, Interceptor ajax.protocols, -abort ajax.protocols, -status-text ajax.protocols, -get-response-header ajax.protocols, AjaxResponse ajax.protocols, AjaxRequest ajax.protocols, -process-response ajax.protocols, -was-aborted ajax.protocols, -process-request ajax.protocols, -body ajax.protocols, -js-ajax-request ajax.protocols, Response ajax.protocols}, :defs {->ApplyRequestFormat {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 158, :column 12, :end-line 158, :end-column 30, :internal-ctor true, :factory :positional, :arglists (quote ([]))}, :name ajax.interceptors/->ApplyRequestFormat, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 158, :end-line 158, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, success? {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 54, :column 8, :end-line 54, :end-column 16, :private true, :arglists (quote ([status]))}, :private true, :name ajax.interceptors/success?, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 16, :method-params ([status]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([status]))}, ProcessGet {:num-fields 0, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/Interceptor cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.interceptors/ProcessGet, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 22, :type true, :column 12, :internal-ctor true, :line 190, :record true, :end-line 190, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, exception-message {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 58, :column 17, :end-line 58, :end-column 34, :arglists (quote ([e]))}, :name ajax.interceptors/exception-message, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 34, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 11, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, ->DirectSubmission {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 204, :column 12, :end-line 204, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([]))}, :name ajax.interceptors/->DirectSubmission, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 204, :end-line 204, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, request-interceptors {:name ajax.interceptors/request-interceptors, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 211, :column 1, :end-line 211, :end-column 26, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 211, :column 6, :end-line 211, :end-column 26}}, DirectSubmission {:num-fields 0, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/Interceptor cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.interceptors/DirectSubmission, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 28, :type true, :column 12, :internal-ctor true, :line 204, :record true, :end-line 204, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, get-request-format {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 140, :column 18, :end-line 140, :end-column 36, :internal true, :arglists (quote ([format]))}, :name ajax.interceptors/get-request-format, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 36, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal true, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format]))}, to-interceptor {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 42, :column 7, :end-line 42, :end-column 21, :arglists (quote ([m]))}, :name ajax.interceptors/to-interceptor, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, apply-request-format {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 152, :column 7, :end-line 152, :end-column 27, :arglists (quote ([write params]))}, :name ajax.interceptors/apply-request-format, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 27, :method-params ([write params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists (quote ([write params]))}, content-type-to-request-header {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 85, :column 7, :end-line 85, :end-column 37, :arglists (quote ([content-type]))}, :name ajax.interceptors/content-type-to-request-header, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 37, :method-params ([content-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content-type]))}, map->StandardInterceptor {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 35, :column 12, :end-line 35, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__7969]))}, :name ajax.interceptors/map->StandardInterceptor, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 31, :method-params ([G__7969]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7969]))}, map->ApplyRequestFormat {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 158, :column 12, :end-line 158, :end-column 30, :internal-ctor true, :factory :map, :arglists (quote ([G__8022]))}, :name ajax.interceptors/map->ApplyRequestFormat, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 30, :method-params ([G__8022]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__8022]))}, get-response-format {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 221, :column 7, :end-line 221, :end-column 26, :arglists (quote ([interpret-vector {:keys [response-format], :as opts}]))}, :name ajax.interceptors/get-response-format, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 26, :method-params ([interpret-vector p__8068]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 2, :fn-var true, :arglists (quote ([interpret-vector {:keys [response-format], :as opts}]))}, map->ResponseFormat {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 97, :column 12, :end-line 97, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__8000]))}, :name ajax.interceptors/map->ResponseFormat, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 26, :method-params ([G__8000]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__8000]))}, is-response-format? {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 217, :column 7, :end-line 217, :end-column 26, :arglists (quote ([response-format]))}, :name ajax.interceptors/is-response-format?, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 26, :method-params ([response-format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 1, :fn-var true, :arglists (quote ([response-format]))}, exception-response {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 60, :column 8, :end-line 60, :end-column 26, :private true, :arglists (quote ([e status {:keys [description]} xhrio]))}, :private true, :name ajax.interceptors/exception-response, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 26, :method-params ([e status p__7985 xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 4, :fn-var true, :arglists (quote ([e status {:keys [description]} xhrio]))}, uri-with-params {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 177, :column 28, :end-line 177, :end-column 43, :internal true, :arglists (quote ([{:keys [vec-strategy params]} uri] [{:keys [vec-strategy params]}])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [vec-strategy params]} uri] [{:keys [vec-strategy params]}]), :arglists ([{:keys [vec-strategy params]} uri] [{:keys [vec-strategy params]}]), :arglists-meta (nil nil)}}, :name ajax.interceptors/uri-with-params, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 43, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [vec-strategy params]} uri] [{:keys [vec-strategy params]}]), :arglists ([{:keys [vec-strategy params]} uri] [{:keys [vec-strategy params]}]), :arglists-meta (nil nil)}, :method-params ([{:keys [vec-strategy params]} uri] [{:keys [vec-strategy params]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal true, :line 177, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [vec-strategy params]} uri] [{:keys [vec-strategy params]}])}, ->ProcessGet {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 190, :column 12, :end-line 190, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([]))}, :name ajax.interceptors/->ProcessGet, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 190, :end-line 190, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, StandardInterceptor {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/Interceptor cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.interceptors/StandardInterceptor, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 31, :type true, :column 12, :internal-ctor true, :line 35, :record true, :end-line 35, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->ProcessGet {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 190, :column 12, :end-line 190, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__8048]))}, :name ajax.interceptors/map->ProcessGet, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 22, :method-params ([G__8048]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__8048]))}, ApplyRequestFormat {:num-fields 0, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/Interceptor cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.interceptors/ApplyRequestFormat, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 30, :type true, :column 12, :internal-ctor true, :line 158, :record true, :end-line 158, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->ResponseFormat {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 97, :column 12, :end-line 97, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([read description content-type]))}, :name ajax.interceptors/->ResponseFormat, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 26, :method-params ([read description content-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 97, :end-line 97, :max-fixed-arity 3, :fn-var true, :arglists (quote ([read description content-type]))}, fail {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 77, :column 7, :end-line 77, :end-column 11, :arglists (quote ([status status-text failure & params])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(status status-text failure params)], :arglists ([status status-text failure & params]), :arglists-meta (nil)}}, :name ajax.interceptors/fail, :variadic true, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(status status-text failure params)], :arglists ([status status-text failure & params]), :arglists-meta (nil)}, :method-params [(status status-text failure params)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists ([status status-text failure & params])}, ->StandardInterceptor {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 35, :column 12, :end-line 35, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([name request response]))}, :name ajax.interceptors/->StandardInterceptor, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 31, :method-params ([name request response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 35, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name request response]))}, ResponseFormat {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted ajax.protocols/Interceptor cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name ajax.interceptors/ResponseFormat, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 26, :type true, :column 12, :internal-ctor true, :line 97, :record true, :end-line 97, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->DirectSubmission {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :line 204, :column 12, :end-line 204, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__8059]))}, :name ajax.interceptors/map->DirectSubmission, :variadic false, :file "resources\\public\\js\\compiled\\out\\ajax\\interceptors.cljc", :end-column 28, :method-params ([G__8059]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 204, :end-line 204, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__8059]))}}, :require-macros {m ajax.macros, ajax.macros ajax.macros, p poppea, poppea poppea}, :cljs.analyzer/constants {:seen #{:response :description :format :request :original-text :read :else :failure response description :method :name :response-format :status-text request :aborted :params read :parse-error :headers :write name :status :parse :content-type :error :exception :uri :timeout :body :vec-strategy content-type :failed}, :order [:request :response :name name request response :description :status :failure :error :status-text :parse :original-text :parse-error :content-type :headers :read :exception :else :failed :aborted :timeout read description content-type :write :uri :method :format :params :body :vec-strategy :response-format]}, :doc "This file contains the standard interceptors used by cljs-ajax to implement\n   most of the 'magic'. There are four of them: \n     \n     * ProcessGet, which handles the fact that GETs do not have bodies and so need treating separately.\n     * ApplyRequestFormat, which takes the request format key and applies it to the params key.\n     * ResponseFormat, which is a parameterised interceptor dynamically added to the interceptor list. Note that the response format routines return one of these.\n     * DirectSubmission, which spots that you're using a type that doesn't need format processing and sends it immediately.\n   \n   There are no functions forming part of the public API in this file, so\n   unless you're working on, studying or debugging cljs-ajax, you're \n   probably in the wrong place."}