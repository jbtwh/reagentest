;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name reagent-modals.modals, :imports {EventType goog.events.EventType}, :requires {r reagent.core, reagent.core reagent.core, dom goog.dom, goog.dom goog.dom, events goog.events, goog.events goog.events, EventType goog.events.EventType}, :uses {atom reagent.core}, :defs {modal-id {:name reagent-modals.modals/modal-id, :file "resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 11, :column 1, :end-line 11, :end-column 14, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 11, :column 6, :end-line 11, :end-column 14}}, modal-content {:name reagent-modals.modals/modal-content, :file "resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 13, :column 1, :end-line 13, :end-column 19, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 13, :column 6, :end-line 13, :end-column 19}}, get-modal {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 17, :column 7, :end-line 17, :end-column 16, :arglists (quote ([]))}, :name reagent-modals.modals/get-modal, :variadic false, :file "resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, show-modal! {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 21, :column 7, :end-line 21, :end-column 18, :arglists (quote ([keyboard]))}, :name reagent-modals.modals/show-modal!, :variadic false, :file "resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :end-column 18, :method-params ([keyboard]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([keyboard]))}, close-modal! {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 27, :column 7, :end-line 27, :end-column 19, :arglists (quote ([]))}, :name reagent-modals.modals/close-modal!, :variadic false, :file "resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, close-button {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 31, :column 7, :end-line 31, :end-column 19, :arglists (quote ([])), :doc "A pre-configured close button. Just include it anywhere in the\n   modal to let the user dismiss it."}, :name reagent-modals.modals/close-button, :variadic false, :file "resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "A pre-configured close button. Just include it anywhere in the\n   modal to let the user dismiss it."}, modal-window* {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 40, :column 7, :end-line 40, :end-column 20, :arglists (quote ([]))}, :name reagent-modals.modals/modal-window*, :variadic false, :file "resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, modal-window {:name reagent-modals.modals/modal-window, :file "resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 49, :column 1, :end-line 49, :end-column 18, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 49, :column 6, :end-line 49, :end-column 18}}, modal! {:protocol-inline nil, :meta {:file "d:\\workspace\\projects\\reagentest\\resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :line 67, :column 7, :end-line 67, :end-column 13, :arglists (quote ([reagent-content] [reagent-content configs])), :doc "Update and show the modal window. `reagent-content' is a normal\n   reagent component. `configs' is an optional map of advanced\n   configurations: \n\n   - :shown -> a function called once the modal is shown.\n   - :hide -> a function called once the modal is asked to hide.\n   - :hidden -> a function called once the modal is hidden.\n   - :size -> Can be :lg (large) or :sm (small). Everything else defaults to medium.\n   - :keyboard -> if `esc' can dismiss the modal. Default to true.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([reagent-content] [reagent-content configs]), :arglists ([reagent-content] [reagent-content configs]), :arglists-meta (nil nil)}}, :name reagent-modals.modals/modal!, :variadic false, :file "resources\\public\\js\\compiled\\out\\reagent_modals\\modals.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([reagent-content] [reagent-content configs]), :arglists ([reagent-content] [reagent-content configs]), :arglists-meta (nil nil)}, :method-params ([reagent-content] [reagent-content configs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists ([reagent-content] [reagent-content configs]), :doc "Update and show the modal window. `reagent-content' is a normal\n   reagent component. `configs' is an optional map of advanced\n   configurations: \n\n   - :shown -> a function called once the modal is shown.\n   - :hide -> a function called once the modal is asked to hide.\n   - :hidden -> a function called once the modal is hidden.\n   - :size -> Can be :lg (large) or :sm (small). Everything else defaults to medium.\n   - :keyboard -> if `esc' can dismiss the modal. Default to true."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:role :tab-index :keyboard :span.sr-only :div.modal-content :lg :aria-hidden :div.modal-dialog :sm :content :component-did-mount :div.modal.fade :type :shown :size :hide :data-dismiss :div :hidden :id :class :button.close :span.glyphicon.glyphicon-remove}, :order [:content :shown :size :div :button.close :type :data-dismiss :span.glyphicon.glyphicon-remove :aria-hidden :span.sr-only :lg :sm :div.modal.fade :id :tab-index :role :div.modal-dialog :class :div.modal-content :component-did-mount :hide :hidden :keyboard]}, :doc nil}